/*
 Generated by typeshare 1.9.2
*/

export interface AddrWrappedPayload<T> {
  addr: BluetoothAdrr;
  payload: T;
}

export interface TaggedStateResponse {
  addr: BluetoothAdrr;
  state: SoundcoreDeviceState;
}

export interface ConnectionFailedResponse {
  addr: BluetoothAdrr;
  reason: string;
}

export type BridgeCommand =
  | { command: 'scan'; payload?: undefined }
  | { command: 'connect'; payload: DiscoveredDevice }
  | { command: 'disconnect'; payload: BluetoothAdrr }
  | { command: 'disconnectAll'; payload?: undefined }
  | { command: 'setSoundMode'; payload: AddrWrappedPayload<SoundMode> }
  | { command: 'setEqualizer'; payload: AddrWrappedPayload<SetEqualizerPayload> };

export type SetEqualizerPayload =
  | { command: 'setCustomEqualizer'; payload: number[] }
  | { command: 'setEqualizerPreset'; payload: EQProfile };

export type BridgeResponse =
  | { kind: 'scanResult'; payload: DiscoveredDevice[] }
  | { kind: 'connectionEstablished'; payload: TaggedStateResponse }
  | { kind: 'newState'; payload: TaggedStateResponse }
  | { kind: 'disconnected'; payload: BluetoothAdrr }
  | { kind: 'disconnectedAll'; payload?: undefined }
  | { kind: 'adapterEvent'; payload: BLEAdapterEvent }
  | { kind: 'connectionFailed'; payload: ConnectionFailedResponse }
  | { kind: 'genericError'; payload: string }
  | { kind: 'deviceNotFound'; payload: BluetoothAdrr }
  | { kind: 'soundModeUpdated'; payload: BluetoothAdrr }
  | { kind: 'equalizerUpdated'; payload: BluetoothAdrr };
