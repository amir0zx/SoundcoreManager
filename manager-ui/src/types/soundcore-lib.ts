/*
 Generated by typeshare 1.8.0
*/

export type CustomANCValue = number;

export type CustomTransparencyValue = number;

export type HearIDType = number;

export type HearIDMusicType = number;

/**
 *
 * "Toggle" types, booleans that represent a toggleable feature and are parsed using the bool_parser.
 *
 */
export type GameMode = boolean;

export type BassUp = boolean;

export type LDAC = boolean;

export type InEarBeep = boolean;

export type SupportTwoCnn = boolean;

export type ThreeDimensionalEffect = boolean;

export type SideTone = boolean;

export type PowerOnBatteryNotice = boolean;

export type TwsStatus = boolean;

export type WearDetection = boolean;

export type TouchTone = boolean;

export type AgeRange = number;

export type AmbientSoundNotice = boolean;

export interface EqualizerFeatures {
  bands: number;
  channels: number;
}

export interface SoundModeFeatures {
  allowedAncModes: ANCMode[];
  allowedTransparencyModes: TransparencyMode[];
  hasNormal: boolean;
  hasCustomizableAnc: boolean;
  hasCustomizableTransparency: boolean;
  maxCustomAnc?: number;
  maxCustomTransparency?: number;
}

export interface DeviceFeatureSet {
  soundModeFeatures?: SoundModeFeatures;
  equalizerFeatures?: EqualizerFeatures;
  flags: FeatureFlags[];
}

export type Battery =
  | { type: 'single'; value: SingleBattery }
  | { type: 'dual'; value: DualBattery };

export enum CurrentSoundMode {
  ANC = 'anc',
  Transparency = 'transparency',
  Normal = 'normal'
}

export type ANCMode =
  | { type: 'sceneBased'; value: SceneBasedANCMode }
  | { type: 'adaptive'; value: AdaptiveANCMode };

export type TransparencyMode =
  | { type: 'nonCustomizable'; value: NonCustomizableTransparencyMode }
  | { type: 'customizable'; value: CustomizableTransparencyMode };

export interface SoundMode {
  current: CurrentSoundMode;
  ancMode: ANCMode;
  transMode: TransparencyMode;
  customAnc: CustomANCValue;
  customTrans?: CustomTransparencyValue;
}

export type EQConfiguration =
  | { type: 'stereo'; value: StereoEQConfiguration }
  | { type: 'mono'; value: MonoEQConfiguration };

export enum SupportedModels {
  A3027 = 'A3027',
  A3028 = 'A3028',
  A3029 = 'A3029',
  A3040 = 'A3040',
  A3930 = 'A3930',
  A3931 = 'A3931',
  A3935 = 'A3935',
  A3951 = 'A3951'
}

export interface SerialNumber {
  value: string;
  model?: SupportedModels;
}

export interface FirmwareVer {
  major: number;
  minor: number;
}

export type ButtonModel =
  | { type: 'a3909'; value: A3909ButtonModel }
  | { type: 'a3040'; value: A3040ButtonModel };

export type HearID = { type: 'base'; value: BaseHearID } | { type: 'custom'; value: CustomHearID };

/** This is a generalized version of the state for all devices */
export interface SoundcoreDeviceState {
  featureSet: DeviceFeatureSet;
  battery: Battery;
  soundMode: SoundMode;
  eqConfiguration: EQConfiguration;
  serial?: SerialNumber;
  fw?: FirmwareVer;
  hostDevice?: number;
  twsStatus?: TwsStatus;
  buttonModel?: ButtonModel;
  sideTone?: SideTone;
  hearidEqPreset?: number;
  wearDetection?: WearDetection;
  hearId?: HearID;
  ageRange?: AgeRange;
}

export interface BluetoothAdrr {
  address: [number, number, number, number, number, number];
}

export interface BLEDeviceDescriptor {
  addr: BluetoothAdrr;
  name: string;
}

/** A discovered BLE device. The DiscoveredDevice can be upgraded to a SoundcoreBLEDevice. */
export interface DiscoveredDevice {
  /** The BLE device descriptor. */
  descriptor: BLEDeviceDescriptor;
  /** The model of the device, resolved using the device's advertised name. */
  model?: SupportedModels;
}

export enum Action {
  VolumeUp = 'volumeUp',
  VolumeDown = 'volumeDown',
  PreviousSong = 'previousSong',
  NextSong = 'nextSong',
  AmbientSound = 'ambientSound',
  VoiceAssistant = 'voiceAssistant',
  PlayPause = 'playPause',
  BassUpToggle = 'bassUpToggle',
  Null = 'null',
  ControlThreeDimensionalEffect = 'controlThreeDimensionalEffect'
}

export interface A3040ButtonModel {
  single_click: Action;
  double_click: Action;
}

export interface TwsButtonAction {
  nonTwsAction: Action;
  twsAction: Action;
  enabled: boolean;
}

export interface NonTwsButtonAction {
  action: Action;
  enabled: boolean;
}

export interface ButtonSide {
  doublePress: TwsButtonAction;
  singlePress: NonTwsButtonAction;
  longPress: TwsButtonAction;
}

/**
 * This is the A3909 variant of the CustomBtnModel
 * TODO: Check if there are common models to other button models, if so move them to a common file
 */
export interface A3909ButtonModel {
  left: ButtonSide;
  right: ButtonSide;
}

export interface SingleBattery {
  charging: boolean;
  level: number;
}

export interface DualBattery {
  left: SingleBattery;
  right: SingleBattery;
}

export interface MonoEQ {
  /** * The values that we store are what is
   * received/sent and clamped within the range of 0..=240 */
  values: number[];
}

export interface StereoEQ {
  left: MonoEQ;
  right: MonoEQ;
}

export enum EQProfile {
  SoundcoreSignature = 'SoundcoreSignature',
  Acoustic = 'Acoustic',
  BassBooster = 'BassBooster',
  BassReducer = 'BassReducer',
  Classical = 'Classical',
  Podcast = 'Podcast',
  Dance = 'Dance',
  Deep = 'Deep',
  Electronic = 'Electronic',
  Flat = 'Flat',
  HipHop = 'HipHop',
  Jazz = 'Jazz',
  Latin = 'Latin',
  Lounge = 'Lounge',
  Piano = 'Piano',
  Pop = 'Pop',
  RnB = 'RnB',
  Rock = 'Rock',
  SmallSpeakers = 'SmallSpeakers',
  SpokenWord = 'SpokenWord',
  TrebleBooster = 'TrebleBooster',
  TrebleReducer = 'TrebleReducer',
  Custom = 'Custom',
  Foxes = 'Foxes',
  Halestorm = 'Halestorm',
  Lecrae = 'Lecrae',
  Daya = 'Daya',
  CedricGervais = 'CedricGervais',
  TheInfamousStringdusters = 'TheInfamousStringdusters',
  JohnPaulWhite = 'JohnPaulWhite',
  SoundcoreSignatureBassUp = 'SoundcoreSignatureBassUp'
}

export interface StereoEQConfiguration {
  eq: StereoEQ;
  profile: EQProfile;
}

export interface MonoEQConfiguration {
  eq: MonoEQ;
  profile: EQProfile;
}

export interface BaseHearID {
  enabled: boolean;
  values: StereoEQ;
  time: number;
}

export interface CustomHearID {
  base: BaseHearID;
  hearid_type: HearIDType;
  hearid_music_type: HearIDMusicType;
  custom_values?: StereoEQ;
}

export enum FeatureFlags {
  DRC = 'DRC',
  HEARID = 'HEARID',
  WEAR_DETECTION = 'WEAR_DETECTION',
  CUSTOM_BUTTONS = 'CUSTOM_BUTTONS',
  TOUCH_TONE = 'TOUCH_TONE',
  GAME_MODE = 'GAME_MODE',
  AUTO_POWER_OFF_ON = 'AUTO_POWER_OFF_ON',
  IN_EAR_BEEP = 'IN_EAR_BEEP',
  LANG_PROMPT = 'LANG_PROMPT',
  HEARING_PROTECTION = 'HEARING_PROTECTION',
  AMBIENT_SOUND_NOTICE = 'AMBIENT_SOUND_NOTICE',
  POWER_ON_BATTERY_NOTICE = 'POWER_ON_BATTERY_NOTICE',
  SUPPORT_TWO_CONNECTIONS = 'SUPPORT_TWO_CONNECTIONS',
  MULTIPLE_DEVICE_LIST = 'MULTIPLE_DEVICE_LIST'
}

export type BLEAdapterEvent =
  | { kind: 'deviceConnected'; value: BluetoothAdrr }
  | { kind: 'deviceDisconnected'; value: BluetoothAdrr };

export enum AdaptiveANCMode {
  Custom = 'Custom',
  Adaptive = 'Adaptive'
}

export enum CustomizableTransparencyMode {
  TalkMode = 'talkMode',
  Custom = 'custom'
}

export enum SoundcoreFeatureFlags {
  SOUND_MODE = 'soundMode',
  ANC_MODE = 'ancMode',
  TRANS_MODE = 'transMode',
  CUSTOM_ANC = 'customAnc',
  EQ = 'eq',
  STEREO_EQ = 'stereoEq',
  DRC = 'drc',
  HEARID = 'hearid',
  WEAR_DETECTION = 'wearDetection',
  CUSTOM_BUTTONS = 'customButtons',
  TOUCH_TONE = 'touchTone',
  GAME_MODE = 'gameMode',
  AUTO_POWER_OFF_ON = 'autoPowerOffOn',
  IN_EAR_BEEP = 'inEarBeep',
  LANG_PROMPT = 'langPrompt',
  HEARING_PROTECTION = 'hearingProtection',
  AMBIENT_SOUND_NOTICE = 'ambientSoundNotice',
  POWER_ON_BATTERY_NOTICE = 'powerOnBatteryNotice',
  SUPPORT_TWO_CONNECTIONS = 'supportTwoConnections',
  MULTIPLE_DEVICE_LIST = 'multipleDeviceList'
}

export enum NonCustomizableTransparencyMode {
  FullyTransparent = 'fullyTransparent',
  Vocal = 'vocal'
}

export enum PromptLanguage {
  English = 'English',
  Chinese = 'Chinese'
}

export enum SceneBasedANCMode {
  Transport = 'Transport',
  Outdoor = 'Outdoor',
  Indoor = 'Indoor',
  Custom = 'Custom'
}
